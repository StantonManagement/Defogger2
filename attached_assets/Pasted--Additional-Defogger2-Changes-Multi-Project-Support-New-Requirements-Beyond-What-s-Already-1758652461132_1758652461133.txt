# Additional Defogger2 Changes - Multi-Project Support

## New Requirements (Beyond What's Already Sent)

### 1. Add Project Selector to UI

```jsx
// Add to main navigation or header
<ProjectSelector>
  <select onChange={handleProjectChange} value={currentProject}>
    <option value="all">All Projects</option>
    <option value="collections_system">Collections System</option>
    <option value="property_management">Property Management</option>
    <option value="client_work">Client Projects</option>
  </select>
</ProjectSelector>
```

### 2. Add Project & Component Tags to Tasks

```javascript
// Extend task model
const task = {
  id: 'task_001',
  title: 'Implement Redis Queue',
  developer: 'Jose Enrico Maxino',
  project: 'collections_system',        // NEW
  component: 'task_queue',               // NEW
  cross_project: false,                  // NEW - flag for multi-project tasks
  dependencies: ['api_framework'],       // NEW - which components this needs
  status: 'in_progress',
  // ... existing fields
};
```

### 3. Create Project-Based Views

```jsx
// New component for project filtering
<ProjectView project={selectedProject}>
  <ProjectHeader>
    <h2>{project.name}</h2>
    <ProjectStats>
      <Stat>Components: {project.components.length}</Stat>
      <Stat>Developers: {project.developers.length}</Stat>
      <Stat>Budget Used: ${project.spent} / ${project.budget}</Stat>
    </ProjectStats>
  </ProjectHeader>
  
  <ComponentGrid>
    {project.components.map(component => (
      <ComponentCard key={component.id}>
        {/* Existing component card content */}
        <ProjectBadge>{project.name}</ProjectBadge>
      </ComponentCard>
    ))}
  </ComponentGrid>
</ProjectView>
```

### 4. Add Cross-Project Developer View

```jsx
// New page: /developers/{developer_name}
<DeveloperProjectView>
  <h2>{developer.name} - Multi-Project Assignments</h2>
  
  <ProjectAssignments>
    <ProjectSection>
      <h3>Collections System</h3>
      <Task>Task Queue Component - POC</Task>
      <Payment>$75 pending</Payment>
    </ProjectSection>
    
    <ProjectSection>
      <h3>Property Management</h3>
      <Task>Database Migration - Planned</Task>
      <Payment>$150 estimated</Payment>
    </ProjectSection>
  </ProjectAssignments>
  
  <TotalCommitments>
    Total Pending: $225
    Total Hours: 20
  </TotalCommitments>
</DeveloperProjectView>
```

### 5. Implement Component Dependency Tracking

```javascript
// Add to database schema
const componentDependencies = {
  'notification_service': {
    depends_on: ['task_queue', 'event_bus'],
    required_by: [],
    integration_status: 'pending'
  },
  'task_queue': {
    depends_on: ['api_framework'],
    required_by: ['notification_service', 'document_processor'],
    integration_status: 'pending'
  }
  // ... etc
};

// Visual dependency graph component
<DependencyGraph>
  <Node id="api_framework" x={50} y={100} status="poc">
    Paul - API Framework
  </Node>
  <Edge from="api_framework" to="task_queue" />
  <Node id="task_queue" x={150} y={100} status="poc">
    Jose - Task Queue
  </Node>
  // ... render full graph
</DependencyGraph>
```

### 6. Add Multi-Project Payment Tracking

```javascript
// Extend payment model
const payment = {
  id: 'pay_001',
  developer_name: 'Jose Enrico Maxino',
  project: 'collections_system',           // NEW - which project
  component: 'task_queue',                 // Already added
  billable_to: 'internal',                 // NEW - internal/client_name
  allocation: {                            // NEW - split payments
    'collections_system': 75,
    'property_management': 0
  },
  // ... existing fields
};
```

### 7. Create Master Tracking Dashboard

```jsx
// New page: /master-dashboard
<MasterDashboard>
  <AllProjectsOverview>
    <ProjectCard>
      <Name>Collections System</Name>
      <Progress>5/6 components in POC</Progress>
      <Budget>$375/$10,000</Budget>
      <Developers>6 active</Developers>
    </ProjectCard>
    
    <ProjectCard>
      <Name>Property Management</Name>
      <Progress>Planning phase</Progress>
      <Budget>$0/$5,000</Budget>
      <Developers>0 active</Developers>
    </ProjectCard>
  </AllProjectsOverview>
  
  <CrossProjectAlerts>
    <Alert type="dependency">
      Task Queue (Collections) blocks Inventory System (Property Mgmt)
    </Alert>
    <Alert type="developer">
      Jose has 15 hours committed across 2 projects this week
    </Alert>
  </CrossProjectAlerts>
</MasterDashboard>
```

### 8. Database Schema Additions

```sql
-- Add project tracking
ALTER TABLE tasks ADD COLUMN project VARCHAR(50);
ALTER TABLE tasks ADD COLUMN component VARCHAR(50);
ALTER TABLE tasks ADD COLUMN cross_project BOOLEAN DEFAULT FALSE;

-- Add developer capacity tracking
CREATE TABLE developer_capacity (
  developer_name VARCHAR(100),
  project VARCHAR(50),
  hours_allocated INT,
  hours_used INT,
  week_of DATE,
  PRIMARY KEY (developer_name, project, week_of)
);

-- Add project definitions
CREATE TABLE projects (
  id VARCHAR(50) PRIMARY KEY,
  name VARCHAR(100),
  budget DECIMAL(10,2),
  budget_used DECIMAL(10,2),
  status VARCHAR(50),
  created_at TIMESTAMP
);

-- Add component dependencies
CREATE TABLE component_dependencies (
  component VARCHAR(50),
  depends_on VARCHAR(50),
  project VARCHAR(50),
  PRIMARY KEY (component, depends_on)
);
```

### 9. Quick Filter Buttons

```jsx
// Add to task list page
<QuickFilters>
  <FilterButton onClick={() => filterBy('my_tasks')}>
    My Components
  </FilterButton>
  <FilterButton onClick={() => filterBy('collections')}>
    Collections Only
  </FilterButton>
  <FilterButton onClick={() => filterBy('cross_project')}>
    Multi-Project Tasks
  </FilterButton>
  <FilterButton onClick={() => filterBy('blocked')}>
    Blocked by Dependencies
  </FilterButton>
</QuickFilters>
```

### 10. Prevent Wrong Assignment Issues

```javascript
// Add validation when creating tasks
const validateTaskAssignment = (task) => {
  // Check if developer is already on this component
  if (isDeveloperAssigned(task.developer, task.component)) {
    return { error: `${task.developer} already owns ${task.component}` };
  }
  
  // Check if developer has capacity
  if (getDeveloperHours(task.developer) > 40) {
    return { warning: `${task.developer} is over capacity this week` };
  }
  
  // Check for file name conflicts
  if (fileExists(`${task.developer}-${task.component}.md`)) {
    return { error: `File already exists for this assignment` };
  }
  
  return { valid: true };
};
```

## Implementation Priority

1. **First:** Add project field to all existing data
2. **Second:** Implement project selector/filter
3. **Third:** Add dependency tracking
4. **Fourth:** Create multi-project views
5. **Last:** Add validation to prevent wrong assignments

## Benefits

- **No more wrong files** - System validates before sending
- **See cross-project impact** - Know when one delay affects another
- **Developer capacity** - Prevent overloading
- **Budget by project** - Know what to bill where
- **Component reuse** - Same notification service might serve multiple projects